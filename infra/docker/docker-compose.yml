services:
  postgres:
    image: postgres:15-alpine
    container_name: lekker-postgres
    environment:
      POSTGRES_USER: medusa
      POSTGRES_PASSWORD: medusa
      POSTGRES_DB: medusa
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - lekker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U medusa"]
      interval: 30s
      timeout: 20s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: lekker-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lekker-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  medusa:
    build:
      # Build from monorepo root so workspace packages are available
      context: ../..
      dockerfile: apps/medusa/Dockerfile
    container_name: lekker-medusa
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://medusa:medusa@postgres:5432/medusa
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-here}
      COOKIE_SECRET: ${COOKIE_SECRET:-your-cookie-secret-here}
      NODE_ENV: development
      MEDUSA_ADMIN_ONBOARDING_TYPE: default
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-}
    ports:
      - "9000:9000"
    # Use only uploads volume; do not mount source to avoid overriding the built app
    volumes:
      - medusa_uploads:/app/apps/medusa/uploads
    networks:
      - lekker-network

  # Strapi CMS
  strapi:
    build:
      context: ../../apps/strapi
      dockerfile: Dockerfile
    container_name: lekker-strapi
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: strapi
      DATABASE_USERNAME: medusa
      DATABASE_PASSWORD: medusa
      STRAPI_DATABASE_URL: postgresql://medusa:medusa@postgres:5432/strapi
      APP_KEYS: ${STRAPI_APP_KEYS:-key1,key2,key3,key4}
      JWT_SECRET: ${STRAPI_JWT_SECRET:-your-strapi-jwt-secret}
      ADMIN_JWT_SECRET: ${STRAPI_ADMIN_JWT_SECRET:-your-admin-jwt-secret}
      API_TOKEN_SALT: ${STRAPI_API_TOKEN_SALT:-your-api-token-salt}
      NODE_ENV: development
    ports:
      - "1337:1337"
    volumes:
      # Mount source code for hot reload in development
      - ../../apps/strapi:/usr/src/app
      - strapi_uploads:/usr/src/app/public/uploads
      # Exclude node_modules from volume mounting to preserve built modules
      - /usr/src/app/node_modules
    networks:
      - lekker-network

  # Next.js Web Frontend
  web:
    build:
      context: ../..
      dockerfile: apps/web/Dockerfile
    container_name: lekker-web
    depends_on:
      - medusa
      - strapi
    environment:
      MEDUSA_BACKEND_URL: http://medusa:9000
      NEXT_PUBLIC_MEDUSA_BACKEND_URL: http://localhost:9000
      STRAPI_API_URL: http://strapi:1337/api
      STRAPI_URL: http://localhost:1337
      SITE_URL: http://localhost:3000
      NODE_ENV: development
    ports:
      - "3000:3000"
    volumes:
      # Mount source code for hot reload in development
      - ../../apps/web:/monorepo/apps/web
      - ../../packages:/monorepo/packages
      # Prevent node_modules from being overwritten
      - /monorepo/node_modules
      - /monorepo/apps/web/.next
    networks:
      - lekker-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  medusa_uploads:
    driver: local
  strapi_uploads:
    driver: local

networks:
  lekker-network:
    driver: bridge